"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stockfishEval = exports.getBestLines = exports.parseLineInfo = void 0;
var constants_1 = require("./../constants");
/** @see /test/stockfish-parse-line-info.test.ts */
function parseLineInfo(data) {
    var dataArray = data.trim().split(' ');
    var entry = {
        moves: [],
        depth: NaN,
        multipv: NaN,
        score: {
            type: 'mate',
            value: NaN,
        },
    };
    var isIntoMove = false;
    ['depth', 'multipv', 'score', 'pv'].forEach(function (marker) {
        dataArray.forEach(function (sentence, index) {
            sentence = sentence.trim();
            if (!isIntoMove) {
                if (sentence == marker) {
                    if (marker === 'depth' || marker === 'multipv') {
                        if (marker === 'depth') {
                            entry.depth = parseFloat(dataArray[index + 1]);
                        }
                        else {
                            entry.multipv = parseFloat(dataArray[index + 1].trim());
                        }
                    }
                    else {
                        if (marker === 'score') {
                            entry.score = {
                                type: dataArray[index + 1].trim(),
                                value: parseFloat(dataArray[index + 2]),
                            };
                        }
                        else {
                            // pv
                            isIntoMove = true;
                        }
                    }
                }
            }
            else {
                if (constants_1.PATTERN_UCI_MOVE.test(sentence)) {
                    entry.moves.push(sentence);
                }
            }
        });
    });
    return entry;
}
exports.parseLineInfo = parseLineInfo;
function getBestLines(entries) {
    var bestLines = [];
    entries.forEach(function (lines) {
        bestLines.push(lines.pop());
    });
    return bestLines;
}
exports.getBestLines = getBestLines;
function stockfishEval(params) {
    //@ts-ignore
    return new Promise(function (resolve, reject) {
        var engine = new Worker('/stockfish.js');
        engine.postMessage('uci');
        var lines = [];
        //@ts-ignore
        engine.onmessage = function (_a) {
            var data = _a.data;
            if (data === 'uciok') {
                engine.postMessage("position fen " + params.fen);
                engine.postMessage("setoption name multipv value " + params.multipv);
                engine.postMessage('isready');
            }
            else {
                if (data === 'readyok') {
                    engine.postMessage("go depth " + params.depth);
                }
                else if (data.startsWith('info')) {
                    var entry = parseLineInfo(data);
                    if (lines[entry.multipv - 1] instanceof Array) {
                        lines[entry.multipv - 1].push(entry);
                    }
                    else {
                        lines.push([]);
                        lines[entry.multipv - 1].push(entry);
                    }
                }
            }
            var checkPromotion = function (move) {
                var lastChar = move.slice(-1);
                return isNaN(lastChar);
            };
            var getMove = function (bestMove) {
                return checkPromotion(bestMove)
                    ? {
                        from: bestMove.slice(0, 2),
                        to: bestMove.slice(2, bestMove.length - 1),
                        promotion: bestMove.slice(-1),
                    }
                    : {
                        from: bestMove.slice(0, 2),
                        to: bestMove.slice(2, bestMove.length),
                    };
            };
            if (data.startsWith('bestmove')) {
                engine.postMessage('quit');
                var bestMove = data.split(' ')[1];
                var move = getMove(bestMove);
                resolve({
                    depth: params.depth || 1,
                    multipv: params.multipv || 1,
                    fen: params.fen,
                    lines: getBestLines(lines),
                    bestMove: move,
                });
            }
        };
    });
}
exports.stockfishEval = stockfishEval;
